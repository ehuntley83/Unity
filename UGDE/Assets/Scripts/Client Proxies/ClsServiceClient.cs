//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.1.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="WbAuthenticationSoap", Namespace="http://www.turbine.com/SE/AMS")]
public partial class WbAuthentication : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback AuthenticateWbidOperationCompleted;
    
    private System.Threading.SendOrPostCallback AuthenticateViaConsoleOperationCompleted;
    
    private System.Threading.SendOrPostCallback AuthenticateAndAssociateOperationCompleted;
    
    /// <remarks/>
    public WbAuthentication() {
        this.Url = "http://vm-sqa-temig01.test.turbine.com/CLS/WbAuthentication.asmx";
    }
    
    /// <remarks/>
    public event AuthenticateWbidCompletedEventHandler AuthenticateWbidCompleted;
    
    /// <remarks/>
    public event AuthenticateViaConsoleCompletedEventHandler AuthenticateViaConsoleCompleted;
    
    /// <remarks/>
    public event AuthenticateAndAssociateCompletedEventHandler AuthenticateAndAssociateCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.turbine.com/SE/AMS/AuthenticateWbid", RequestNamespace="http://www.turbine.com/SE/AMS", ResponseNamespace="http://www.turbine.com/SE/AMS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string AuthenticateWbid(string consoleTicket, string realm, string consoleId, string wbEmail, string password, string title, string uniqueId) {
        object[] results = this.Invoke("AuthenticateWbid", new object[] {
                    consoleTicket,
                    realm,
                    consoleId,
                    wbEmail,
                    password,
                    title,
                    uniqueId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAuthenticateWbid(string consoleTicket, string realm, string consoleId, string wbEmail, string password, string title, string uniqueId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AuthenticateWbid", new object[] {
                    consoleTicket,
                    realm,
                    consoleId,
                    wbEmail,
                    password,
                    title,
                    uniqueId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndAuthenticateWbid(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void AuthenticateWbidAsync(string consoleTicket, string realm, string consoleId, string wbEmail, string password, string title, string uniqueId) {
        this.AuthenticateWbidAsync(consoleTicket, realm, consoleId, wbEmail, password, title, uniqueId, null);
    }
    
    /// <remarks/>
    public void AuthenticateWbidAsync(string consoleTicket, string realm, string consoleId, string wbEmail, string password, string title, string uniqueId, object userState) {
        if ((this.AuthenticateWbidOperationCompleted == null)) {
            this.AuthenticateWbidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateWbidOperationCompleted);
        }
        this.InvokeAsync("AuthenticateWbid", new object[] {
                    consoleTicket,
                    realm,
                    consoleId,
                    wbEmail,
                    password,
                    title,
                    uniqueId}, this.AuthenticateWbidOperationCompleted, userState);
    }
    
    private void OnAuthenticateWbidOperationCompleted(object arg) {
        if ((this.AuthenticateWbidCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AuthenticateWbidCompleted(this, new AuthenticateWbidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.turbine.com/SE/AMS/AuthenticateViaConsole", RequestNamespace="http://www.turbine.com/SE/AMS", ResponseNamespace="http://www.turbine.com/SE/AMS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string AuthenticateViaConsole(string consoleTicket, string realm, string consoleId, string password, string title, string uniqueId) {
        object[] results = this.Invoke("AuthenticateViaConsole", new object[] {
                    consoleTicket,
                    realm,
                    consoleId,
                    password,
                    title,
                    uniqueId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAuthenticateViaConsole(string consoleTicket, string realm, string consoleId, string password, string title, string uniqueId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AuthenticateViaConsole", new object[] {
                    consoleTicket,
                    realm,
                    consoleId,
                    password,
                    title,
                    uniqueId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndAuthenticateViaConsole(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void AuthenticateViaConsoleAsync(string consoleTicket, string realm, string consoleId, string password, string title, string uniqueId) {
        this.AuthenticateViaConsoleAsync(consoleTicket, realm, consoleId, password, title, uniqueId, null);
    }
    
    /// <remarks/>
    public void AuthenticateViaConsoleAsync(string consoleTicket, string realm, string consoleId, string password, string title, string uniqueId, object userState) {
        if ((this.AuthenticateViaConsoleOperationCompleted == null)) {
            this.AuthenticateViaConsoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateViaConsoleOperationCompleted);
        }
        this.InvokeAsync("AuthenticateViaConsole", new object[] {
                    consoleTicket,
                    realm,
                    consoleId,
                    password,
                    title,
                    uniqueId}, this.AuthenticateViaConsoleOperationCompleted, userState);
    }
    
    private void OnAuthenticateViaConsoleOperationCompleted(object arg) {
        if ((this.AuthenticateViaConsoleCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AuthenticateViaConsoleCompleted(this, new AuthenticateViaConsoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.turbine.com/SE/AMS/AuthenticateAndAssociate", RequestNamespace="http://www.turbine.com/SE/AMS", ResponseNamespace="http://www.turbine.com/SE/AMS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string AuthenticateAndAssociate(string consoleTicket, string realm, string consoleId, string wbEmail, string password, string title, string uniqueId) {
        object[] results = this.Invoke("AuthenticateAndAssociate", new object[] {
                    consoleTicket,
                    realm,
                    consoleId,
                    wbEmail,
                    password,
                    title,
                    uniqueId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAuthenticateAndAssociate(string consoleTicket, string realm, string consoleId, string wbEmail, string password, string title, string uniqueId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AuthenticateAndAssociate", new object[] {
                    consoleTicket,
                    realm,
                    consoleId,
                    wbEmail,
                    password,
                    title,
                    uniqueId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndAuthenticateAndAssociate(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void AuthenticateAndAssociateAsync(string consoleTicket, string realm, string consoleId, string wbEmail, string password, string title, string uniqueId) {
        this.AuthenticateAndAssociateAsync(consoleTicket, realm, consoleId, wbEmail, password, title, uniqueId, null);
    }
    
    /// <remarks/>
    public void AuthenticateAndAssociateAsync(string consoleTicket, string realm, string consoleId, string wbEmail, string password, string title, string uniqueId, object userState) {
        if ((this.AuthenticateAndAssociateOperationCompleted == null)) {
            this.AuthenticateAndAssociateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateAndAssociateOperationCompleted);
        }
        this.InvokeAsync("AuthenticateAndAssociate", new object[] {
                    consoleTicket,
                    realm,
                    consoleId,
                    wbEmail,
                    password,
                    title,
                    uniqueId}, this.AuthenticateAndAssociateOperationCompleted, userState);
    }
    
    private void OnAuthenticateAndAssociateOperationCompleted(object arg) {
        if ((this.AuthenticateAndAssociateCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AuthenticateAndAssociateCompleted(this, new AuthenticateAndAssociateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void AuthenticateWbidCompletedEventHandler(object sender, AuthenticateWbidCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AuthenticateWbidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AuthenticateWbidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void AuthenticateViaConsoleCompletedEventHandler(object sender, AuthenticateViaConsoleCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AuthenticateViaConsoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AuthenticateViaConsoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void AuthenticateAndAssociateCompletedEventHandler(object sender, AuthenticateAndAssociateCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AuthenticateAndAssociateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AuthenticateAndAssociateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
